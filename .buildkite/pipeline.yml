env:
  BUILDKITE_PLUGINS_ALWAYS_CLONE_FRESH: 1

steps:
  - label: Lint Linux
    key: lint-alt
    env:
      NODE_ENV: test
    plugins:
      - $NVM_PLUGIN
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- :eslint: Lint"
      make lint

  - label: Test Linux
    key: test-alt
    env:
      NODE_ENV: test
    plugins:
      - $NVM_PLUGIN
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- :jest: Test"
      npm test

  - label: Lint
    key: lint
    agents:
      queue: mac
    env:
      IMAGE_ID: $IMAGE_ID
      NODE_ENV: test
    plugins:
      - $NVM_PLUGIN
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- :eslint: Lint"
      make lint

  - label: Test
    key: test
    agents:
      queue: mac
    env:
      IMAGE_ID: $IMAGE_ID
      NODE_ENV: test
    plugins:
      - $NVM_PLUGIN
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- :jest: Test"
      npm test

  - label: Package on macOS
    key: package-macos
    agents:
      queue: mac
    env:
      IMAGE_ID: $IMAGE_ID
    plugins:
      - $CI_TOOLKIT_PLUGIN
      - $NVM_PLUGIN
    # TODO: Download artifacts from "build" step, otherwise we're just wasting time!
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- Decrypt secrets"
      # This comes from 'make decrypt_conf' which we cannot call because it's interactive
      openssl aes-256-cbc -d -in ./resources/secrets/config.json.enc -out ./config-local.json -pbkdf2 -k $SECRETS_ENCRYPTION_KEY
      echo "--- Fetch code signing identity"
      install_gems
      bundle exec fastlane configure_code_signing
      echo "--- Build"
      make build
      echo "--- Package"
      make package-osx SKIP_BUILD=true
    artifact_paths:
      - release/*.dmg
      - release/*.dmg.blockmap
      - release/*.yml

  - label: Package on Windows
    key: package-windows
    agents:
      queue: windows
    plugins:
      - $CI_TOOLKIT_PLUGIN
    # TODO: Download artifacts from "build" step, otherwise we're just wasting time!
    command: .buildkite/commands/package_windows.ps1
    artifact_paths:
      - release\*.exe
      - release\*.appx
      - release\*.yml

  - label: Package on Linux
    key: package-linux
    plugins:
      - $CI_TOOLKIT_PLUGIN
    # TODO: Download artifacts from "build" step, otherwise we're just wasting time!
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- Build"
      make build
      echo "--- Package"
      make package-linux SKIP_BUILD=true
    artifact_paths:
      - release\*.deb
      - release\*.tar.gz
      - release\*.yml

  # - label: Build
  #   key: build
  #   plugins:
  #     - $NVM_PLUGIN
  #   command: |
  #     sudo dpkg --add-architecture i386
  #     sudo apt update
  #     sudo apt -y install libxkbfile-dev libxkbfile-dev:i386 libxext-dev libx11-dev libx11-dev:i386 libxss-dev gcc-multilib g++-multilib rpm
  #     .buildkite/commands/install_node_dependencies.sh
  #     make build
