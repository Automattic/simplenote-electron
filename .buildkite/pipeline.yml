env:
  BUILDKITE_PLUGINS_ALWAYS_CLONE_FRESH: 1

steps:
  - label: Lint
    key: lint
    env:
      NODE_ENV: test
    plugins:
      - $NVM_PLUGIN
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- :eslint: Lint"
      make lint

  - label: Test
    key: test
    env:
      NODE_ENV: test
    plugins:
      - $NVM_PLUGIN
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- :jest: Test"
      npm test

  # Notice that we build the app in each platform because it takes ~1-2 minutes
  # to do so which is comparable to a dedicated build step, archiving the
  # artifacts, uploading them, then downloading them in each package step.

  - label: Package on macOS
    key: package-macos
    agents:
      queue: mac
    env:
      IMAGE_ID: $IMAGE_ID
    plugins:
      - $CI_TOOLKIT_PLUGIN
      - $NVM_PLUGIN
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- Fetch code signing identity"
      install_gems
      bundle exec fastlane configure_code_signing
      echo "--- Decrypt secrets"
      # This comes from 'make decrypt_conf' which we cannot call because it's interactive
      openssl aes-256-cbc -d -in ./resources/secrets/config.json.enc -out ./config-local.json -pbkdf2 -k $SECRETS_ENCRYPTION_KEY
      bundle exec fastlane run configure_apply
      echo "--- Build"
      make build
      echo "--- Package"
      make package-osx SKIP_BUILD=true
    artifact_paths:
      - release/*.dmg
      - release/*.dmg.blockmap
      - release/*.yml

  - label: Package on Windows
    key: package-windows
    agents:
      queue: windows
    plugins:
      - $CI_TOOLKIT_PLUGIN
    command: .buildkite/commands/package_windows.ps1
    artifact_paths:
      - release\*.exe
      - release\*.appx
      - release\*.yml

  - label: Package on Linux
    key: package-linux
    plugins:
      - $CI_TOOLKIT_PLUGIN
      - $NVM_PLUGIN
    command: |
      .buildkite/commands/install_node_dependencies.sh
      echo "--- Build"
      make build
      echo "--- Package"
      make package-linux SKIP_BUILD=true
    artifact_paths:
      - release\*.deb
      - release\*.tar.gz
      - release\*.yml

  - label: GitHub Release (fake)
    depends_on:
      - package-linux
      - package-macos
      - package-windows
    commands: |
      echo "+++ Fake GitHub Release Upload"
      echo "...will need to add a tag filter to this"
      echo "TODO: Download assets"
      echo "TODO: Create release and upload assets"
